# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import raw_anime_pb2 as raw__anime__pb2


class RawAnimeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FetchRawAnimes = channel.unary_stream(
            "/anime.RawAnimeService/FetchRawAnimes",
            request_serializer=raw__anime__pb2.Void.SerializeToString,
            response_deserializer=raw__anime__pb2.RawAnime.FromString,
        )
        self.FetchRawAnimesSynopsis = channel.unary_stream(
            "/anime.RawAnimeService/FetchRawAnimesSynopsis",
            request_serializer=raw__anime__pb2.Void.SerializeToString,
            response_deserializer=raw__anime__pb2.RawAnimeSynopsis.FromString,
        )
        self.FetchRawAnimeRatings = channel.unary_stream(
            "/anime.RawAnimeService/FetchRawAnimeRatings",
            request_serializer=raw__anime__pb2.Void.SerializeToString,
            response_deserializer=raw__anime__pb2.RawAnimeRating.FromString,
        )


class RawAnimeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FetchRawAnimes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def FetchRawAnimesSynopsis(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def FetchRawAnimeRatings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_RawAnimeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "FetchRawAnimes": grpc.unary_stream_rpc_method_handler(
            servicer.FetchRawAnimes,
            request_deserializer=raw__anime__pb2.Void.FromString,
            response_serializer=raw__anime__pb2.RawAnime.SerializeToString,
        ),
        "FetchRawAnimesSynopsis": grpc.unary_stream_rpc_method_handler(
            servicer.FetchRawAnimesSynopsis,
            request_deserializer=raw__anime__pb2.Void.FromString,
            response_serializer=raw__anime__pb2.RawAnimeSynopsis.SerializeToString,
        ),
        "FetchRawAnimeRatings": grpc.unary_stream_rpc_method_handler(
            servicer.FetchRawAnimeRatings,
            request_deserializer=raw__anime__pb2.Void.FromString,
            response_serializer=raw__anime__pb2.RawAnimeRating.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("anime.RawAnimeService", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class RawAnimeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FetchRawAnimes(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/anime.RawAnimeService/FetchRawAnimes",
            raw__anime__pb2.Void.SerializeToString,
            raw__anime__pb2.RawAnime.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def FetchRawAnimesSynopsis(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/anime.RawAnimeService/FetchRawAnimesSynopsis",
            raw__anime__pb2.Void.SerializeToString,
            raw__anime__pb2.RawAnimeSynopsis.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def FetchRawAnimeRatings(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/anime.RawAnimeService/FetchRawAnimeRatings",
            raw__anime__pb2.Void.SerializeToString,
            raw__anime__pb2.RawAnimeRating.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
